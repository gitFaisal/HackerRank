*-----------------------------------------------*
       Fraudulent Activity Notifications
*-----------------------------------------------*
First Solution:

def getMedian(arr):
    length = len(arr)
    median = int(length/2)
        if len(arr) % 2 == 0:
            return (arr[median] + arr[median -1]) / 2
        else:
            return arr[median]

def activityNotifications(expenditure, d):
    d_que = []
    notifications = 0
    for i in range(0,len(expenditure)):
        print(d_que)
        if len(d_que) < d:
            d_que.append(expenditure[i])

        elif len(d_que) == d:
            median = getMedian(d_que)
  
            if expenditure[i] >= (median *2):
                notifications += 1 
            d_que.remove(d_que[0])
            d_que.append(expenditure[i])
    return notifications

- This solution passed the first few exams but when tested against large array of numbers, <br>
I beleive it timed out on hackerank due to the time complexity of using sort() function over and over. <br>
- An approach to get passed the timeout would be to use the bisect module to delete the first element <br>
of the array and then keeping the array sorted add the next element in the correct position.<br>


Second Solution: Does not time out because no repeated sorting is done. <br>

def getMedian(arr):
    length = len(arr)
    median = int(length/2)
    if len(arr) % 2 == 0:
        return (arr[median] + arr[median -1]) / 2
    else:
        return arr[median]


def activityNotifications(expenditure, d):
    listD = sorted(expenditure[:d])
    notifications = 0

    for i in range(d, len(expenditure)):
        if expenditure[i] >= 2*getMedian(listD):
            notifications +=1
        del listD[bisect_left(listD, expenditure[i-d])]
        insort_left(listD, expenditure[i])
    return notifications
    
